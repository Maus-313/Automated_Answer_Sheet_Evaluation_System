// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Restrict exam type to CAT or FAT
enum ExamType {
  CAT
  FAT
}

// MarkingSheet: stores evaluated answers/marks per answer (ints)
model MarkingSheet {
  // Use Roll Number as the primary identifier (unique)
  rollNo     String   @id
  name       String
  slot       String
  examType   ExamType
  totalMarks Int

  // Answers 1..10 (0..10); 6..10 nullable for CAT
  answer1  Int?
  answer2  Int?
  answer3  Int?
  answer4  Int?
  answer5  Int?
  answer6  Int?
  answer7  Int?
  answer8  Int?
  answer9  Int?
  answer10 Int?
}

// AnswerSheet: stores raw answers as strings (nullable)
model AnswerSheet {
  // Use Roll Number as the primary identifier (unique)
  rollNo     String   @id
  name       String
  slot       String
  examType   ExamType
  totalMarks Int

  // Answers 1..10 (0..10); text answers, 6..10 nullable for CAT
  answer1  String?
  answer2  String?
  answer3  String?
  answer4  String?
  answer5  String?
  answer6  String?
  answer7  String?
  answer8  String?
  answer9  String?
  answer10 String?
}

// Question paper and questions for a given exam/slot
// Simple QuestionPaper with up to 10 questions (strings)
model QuestionPaper {
  id         String   @id @default(cuid())
  subject    String
  slot       String
  courseCode String
  examType   ExamType

  // Up to 10 questions; for CAT use 1..5, for FAT use 1..10
  question1  String?
  question2  String?
  question3  String?
  question4  String?
  question5  String?
  question6  String?
  question7  String?
  question8  String?
  question9  String?
  question10 String?

  // Avoid duplicates for the same paper context
  @@unique([courseCode, slot, examType])
}

// Simple MarkingScheme with up to 10 items (marks + optional criteria)
model MarkingScheme {
  id         String @id @default(cuid())
  courseCode String
  slot       String
  examType   ExamType

  // For CAT use 1..5, for FAT use 1..10
  mark1      Int?
  criteria1  String?
  mark2      Int?
  criteria2  String?
  mark3      Int?
  criteria3  String?
  mark4      Int?
  criteria4  String?
  mark5      Int?
  criteria5  String?
  mark6      Int?
  criteria6  String?
  mark7      Int?
  criteria7  String?
  mark8      Int?
  criteria8  String?
  mark9      Int?
  criteria9  String?
  mark10     Int?
  criteria10 String?

  // One scheme per course+slot+exam type
  @@unique([courseCode, slot, examType])
}
